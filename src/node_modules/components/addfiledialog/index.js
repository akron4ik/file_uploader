import React, {useEffect, useState} from 'react';
import DialogActions from '@material-ui/core/DialogActions';
import Button from '@material-ui/core/Button';
import axios from "axios";
import callRequestFile from "file/call_request.json"
import callFile from "file/call.json"


const AddFileDialog = (props) => {
    const baseUrl = "https://dataapi.uiscom.ru/"
    const version = "2.0"
    const employeeChanelRight = "right"
    const employeeChanelLeft = "left"
    const defaultName = "Иванов Иван Иванович"
    const [file, setFile] = useState(null);
    const [fileUrl, setFileUrl] = useState("")
    const [id, setId] = useState(0)
    //Ключ сессии аутентификации
    const [accessToken, setAccessToken] = useState("")
    //Список звонков. Максимально 500
    const [calls, setCalls] = useState([])
    //Уникальный идентификатор звонка в вашей системе
    const [extId, setExtId] = useState("")
    //Номер звонящего
    const [callingPhoneNumber, setCallingPhoneNumber] = useState("")
    //Номер куда звонил
    const [calledPhoneNumber, setCalledPhoneNumber] = useState("")
    //начало звонка
    const [startTime, setStartTime] = useState("")
    //конец звонка
    const [finishTime, setFinishTime] = useState("")
    //Признак, что звонок потерянный или успешный
    const [isLost, setIsLost] = useState("false")
    //куда должен приходить ответ
    const [urlAnswer, setUrlAnswer] = useState("")
    const [events, setEvents] = useState(["processed", "in_process", "error"])
    const [tagName, setTagName] = useState(["Целевой"])
    const [employeeName, setEmployeeName] = useState(defaultName)
    const [employeeChannel, setEmployeeChannel] = useState(employeeChanelLeft)
    //адрес файла который будем передавать
    const [recordUrl, setRecordUrl] = useState("")
    const [currentCall, setCurrentCall] = useState({})
    const [currentRequest, setCurrentRequest] = useState({})
    const [direction, setDirection] = useState("in")

    const handleChange = e => {
        if (e.target.files.length) {
            setFile({
                selectedFile: e.target.files[0]
            });
            setFileUrl(URL.createObjectURL(e.target.files[0]))
        }


    }

    useEffect(()=> {
        prepareId()
        parseStartTimeToString()
        parseEndTimeToString()
    },[fileUrl])


    useEffect(()=> {
        setCurrentCall(prepareCall())
    },[id, startTime, finishTime])




    const handleUpload = () => {
        let request = prepareRequest()
        setCurrentRequest(request)
        console.log(` AAAAAAA ==== ${JSON.stringify(request)}`)
        console.log(`FFFFFFFFF== ${request.params.calls[0].mp3_records[0].record_url}`)
    }

    const prepareId = () => {
        let randomId = Math.floor(Math.random() * 10000);
        setId(randomId)
    }

    const parseStartTimeToString = (time) => {
        let date = new Date();
        setStartTime(date.toISOString())
    }

    const parseEndTimeToString = (time) => {
        let date = new Date();
        setFinishTime(date.toISOString())
    }

    const prepareCall = () => {
        let mp3Record = [{
            employee_name: employeeName,
            record_url: fileUrl
        }]

        return {
            callback: {
                url: urlAnswer,
                events: events
            },
            ext_id: extId,
            direction: direction,
            calling_phone_number: callingPhoneNumber,
            called_phone_number: calledPhoneNumber,
            start_time: startTime,
            finish_time: finishTime,
            is_lost: isLost,
            tags: tagName,
            mp3_records: mp3Record
        }
    }

    const prepareRequest = () => {
        return {
            jsonrpc: "2.0",
            id: id,
            method: "upload.calls",
            params: {
                access_token: accessToken,
                calls: [currentCall]
            }
        }
    }

    return (
        <div>
            <DialogActions>
                <input
                    type="file"
                    id="upload-button"
                    onChange={handleChange}
                />

            </DialogActions>

            <DialogActions>
                <Button variant="contained"
                        onClick={() => {
                            setFile(null)
                        }}
                        color="secondary"
                >
                    Отменить
                </Button>


                <Button variant="contained"

                        onClick = { () => {

                            handleUpload()
                                //setOpen(false);
                                //handleUpload();
                            }}
                        color="default">
                    Отправить
                </Button>

            </DialogActions>
        </div>

    )

}

export default AddFileDialog